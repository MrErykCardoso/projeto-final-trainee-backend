name: Testes Unitarios

on: [push, pull_request]
env: 
  POSTGRES_USER: ${{vars.POSTGRES_USER}}
  POSTGRES_PASSWORD: ${{vars.POSTGRES_PASSWORD}}
  POSTGRES_HOST: ${{vars.POSTGRES_HOST}}
  POSTGRES_PORT: ${{vars.POSTGRES_PORT}}
  POSTGRES_DATABASE: ${{vars.POSTGRES_DATABASE}}
  JWT_SECRET: ${{secrets.JWT_SECRET}}


jobs:
  CI:
    runs-on: ubuntu-latest
    services:
      database:
        image: postgres:16
        volumes:
          - ./docker/postgres/projeto-final-ddl.sql:/docker-entrypoint-initdb.d/initdb-projeto-final-ddl.sql
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: $POSTGRES_USER
          POSTGRES_PASSWORD: $POSTGRES_PASSWORD
          POSTGRES_DB: $POSTGRES_DATABASE
    steps:
    - name: Forçar remoção do diretório
      run: sudo rm -rf /home/runner/work/projeto-final-trainee-backend/projeto-final-trainee-backend/docker/postgres

    - name: Verificação do Repositorio
      uses: actions/checkout@v4.1.7

    - name: Configurando Node.Js
      uses: actions/setup-node@v4.0.3
      with:
        node-version: '20'

    - name: Instalando Dependencias
      run: npm clean-install

    - name: Aguardando inicialização do banco de dados
      run: sleep 15s

    - name: Verificando pgsql
      run: psql -c "SHOW listen_addresses;

    - name: Verificar se o banco de dados está acessível
      run: |
        pg_isready -h localhost -p ${{ env.POSTGRES_PORT }} -U ${{ env.POSTGRES_USER }}

    - name: Executando Testes
      env:
        DATABASE_URL: postgres://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:${{ env.POSTGRES_PORT }}/${{ env.POSTGRES_DATABASE }}
      run: npm run test

